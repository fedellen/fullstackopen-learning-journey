{"version":3,"sources":["services/talkTo.js","components/Notification.js","components/Person.js","App.js","index.js"],"names":["axios","get","then","response","data","newObject","post","id","delete","Notification","message","style","color","background","fontSize","borderStyle","borderRadius","margin","padding","Person","person","handleDelete","name","number","onClick","SubmissionForm","persons","addPerson","setPersons","sendNotif","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","event","preventDefault","value","onChange","target","type","Filter","newFilter","handleFilter","App","setNewFilter","alertMessage","setAlertMessage","messageColor","setMessageColor","text","setTimeout","useEffect","talkTo","initialPersons","doFilter","filterValue","filter","el","toLowerCase","indexOf","showPeople","console","log","object","concat","map","i","key","find","n","confirmMessage","window","confirm","status","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4255e2c0.chunk.js","sourcesContent":["import axios from 'axios'\nconst location = '/api/persons'\n\nconst getPeople = () => {\n    const request = axios.get(location)\n    return request.then(response => response.data)\n}\n\nconst addPeople = newObject => {\n    const request = axios.post(location, newObject)\n    return request.then(response => response.data)\n}\n\nconst deletePeople = id => {\n    const request = axios.delete(`${location}/${id}`)\n    return request.then(response => response)\n}\n\n/*\n/*  Removed\n/*\nconst updatePeople = ( id, newObject ) => {\n    const request = axios.put(`${location}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n*/\n\nexport default { \n    getPeople, \n    addPeople, \n    deletePeople, \n    // updatePeople \n}","import React from 'react'\n\nconst Notification = ({ message, color }) => {\n\n    const style = { \n        color: color,\n        background: 'lightgrey',\n        fontSize: 26,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        margin: 20,\n        padding: 20\n    }\n\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div style={style} >\n            {message}\n        </div>\n    )\n\n}\n\nexport default Notification","import React from 'react'\n\nconst Person = ({ person, handleDelete }) => (\n    <div>\n        <div>Name: {person.name}</div>\n        <div>Number: {person.number}</div>\n        <button onClick={handleDelete}>Delete Person</button> \n        <br /><br />\n    </div>\n)\n\nexport default Person","import React, { useEffect, useState } from 'react'\nimport talkTo from './services/talkTo'\nimport Notification from './components/Notification'\nimport Person from './components/Person'\n\nconst SubmissionForm = ({ persons, addPerson, setPersons, sendNotif }) => {\n\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n\n  const handleNumberSubmit = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSubmit = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const addName = (event) => {\n\n    event.preventDefault()\n\n    const newPerson = { name: newName, number: newNumber }\n\n    \n    /*\n    /* Removed feature in latest production build\n    /*\n    const existingPerson = persons.find( object => object['name'] === newName )\n\n    if (existingPerson) {\n\n      const message = `${newName} is already in the phonebook. Would you like to replace the old number with the new one?`\n\n      if (window.confirm(message)) {\n        talkTo.updatePeople(existingPerson.id, newPerson).then(response => {\n          setPersons(persons.map(person => person.id !== existingPerson.id\n            ? person\n            : response\n          ))\n          sendNotif(`Updated number for ${newName}`, 'green')\n        })\n        .catch(error => {\n          sendNotif(`Information for ${newName} has already been removed from the server.`, 'red')\n          setPersons(persons.filter(n => n.id !== existingPerson.id))\n        })\n      }      \n    } else {\n      addPerson(newPerson)\n    }\n    */\n\n    addPerson(newPerson)\n    setNewName('')\n    setNewNumber('')\n  }\n\n  return(\n    <form onSubmit={addName} >\n      <div>\n        name: <input value={newName} onChange={handleSubmit} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={handleNumberSubmit} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\n\n\n\nconst Filter = ({newFilter, handleFilter}) => (\n  <div>\n    filter show with name: <input value={newFilter} onChange={handleFilter}  />\n  </div>\n)\n\nconst App = () => {\n\n  const [ persons, setPersons ] = useState([]) \n  const [ newFilter, setNewFilter ] = useState('')\n  const [ alertMessage, setAlertMessage ] = useState(null)\n  const [ messageColor, setMessageColor ] = useState('green')\n\n    // Use Notification Component\n  const message = (text, color) => {\n    setMessageColor(color)\n    setAlertMessage(text)\n    setTimeout(() => setAlertMessage(null), 5000)\n  }\n\n    // Populate initial Phonebook from server\n  useEffect(() => {\n    talkTo.getPeople().then(initialPersons => setPersons(initialPersons))\n  }, [])\n\n  \n  const doFilter = (filterValue) => (\n    persons.filter(el => el.name.toLowerCase().indexOf(filterValue.toLowerCase()) !== -1)\n  )\n\n  let showPeople = doFilter(newFilter)\n\n  const handleFilter = (event) => {\n    setNewFilter(event.target.value)\n    showPeople = doFilter(newFilter)\n    console.log(showPeople);\n  }\n\n  const addPerson = (object) => {\n      // Add person to back end\n    talkTo.addPeople(object).then(response => {\n      setPersons(persons.concat(response))\n      showPeople = doFilter(newFilter) // Re-filter the content\n      message(`added ${object.name} to the Phonebook`, 'green')\n    })\n  }  \n\n  \n\n  const handleDelete = id => {\n\n      // Get the person\n    const person = persons.find(n => n.id === id)\n    const confirmMessage = `Are you sure you want to Delete ${person.name} from the Phonebook?`\n\n      // Await browser confirmation\n    if (window.confirm(confirmMessage)) {\n      talkTo.deletePeople(id).then(response => {\n        if (response.status === 204) {\n          setPersons(persons.filter(i => i !== person))\n          message(`${person.name} has been deleted from the Phonebook`, 'green')\n        } else {\n          message('Person could not be deleted.', 'red')\n        }\n      })\n    } \n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={alertMessage} color={messageColor} />\n      <Filter newFilter={newFilter} handleFilter={handleFilter} />\n      <h3>Add a new number:</h3>\n      <SubmissionForm persons={persons} addPerson={addPerson} setPersons={setPersons} sendNotif={message} />\n      <h2>Numbers</h2>\n      {showPeople.map((person, i) =>\n        <Person\n          key={i} \n          person={person}\n          handleDelete={() => handleDelete(person.id)}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}